Link para Download do Git: https://git-scm.com/downloads

O git bash é terminal extendido para otimizar o uso do Git.

1. Git clone
-> Git clone é uma comando para baixar o código-fonte existente de um repositório remoto (como, por exemplo, o Github).
Em outras palavras, git clone, basicamente, faz uma cópia idêntica da versão mais recente de um projeto em um repositório
e a salva em seu computador.

EXEMPLO: git clone <https://link-com-o-nome-do-repositório>

2. Git branch
-> Usando as branches, vários desenvolvedores conseguem trabalhar em paralelo no mesmo projeto simultaneamente.
Podemos usar o comando git branch para criar, listar e excluir as branches.

COMO CRIAR UMA BRANCH:

EXEMPLO: git branch <nome-da-branch> // Esse comando criará uma branch em seu local de trabalho.

Para fazer o push (algo como enviar) da nova branch para o repositório remoto, você precisa usar o comando a seguir:
git push -u <local-remoto> <nome-da-branch>

COMO VER AS BRANCHES: git branch ou git branch --list

COMO EXCLUIR UMA BRANCH: git branch -d <nome-da-branch>

3. Git checkout
-> Usamos git checkout, na maioria dos casos, para trocar de uma branch para outra.
Também podemos usar o comando para fazer o checkout de arquivos e commits.

EXEMPLO: git checkout <nome-da-branch>


Existe um comando de atalho que permite criar e automaticamente trocar para a branch criada ao mesmo tempo:
-> git checkout -b <nome-da-branch> // Esse comando cria a branch em seu espaço de trabalho local (a flag -b representa a branch)
                                       e faz o checkout na nova branch logo após sua criação.

4. Git status
-> O comando git status nos dá todas as informações necessárias sobre a branch atual.
EXEMPLO: git status

5. Git add
-> Comando git add para incluir as alterações de um ou vários arquivos em nosso próximo commit.

EXEMPLO: git add <arquivo>

Para adicionar tudo ao mesmo tempo:

EXEMPLO: git add -A

6. Git commit
-> Git commit é como definir um ponto de verificação no processo de desenvolvimento.

EXEMPLO: git commit -m "mensagem do commit"

7. Git push
-> Após fazer o commit de suas alterações, a próxima coisa a fazer é enviar suas alterações ao servidor remoto.
Git push faz o upload dos seus commits no repositório remoto.

EXEMPLO: git push <repositório-remoto> <nome-da-branch>

8. Git pull
-> O comando git pull é usado para obter as atualizações de um repositório remoto. Esse comando é uma combinação de git fetch e git merge,
o que significa que, quando usamos git pull, ele recebe as atualizações do repositório remoto (git fetch) e aplica imediatamente
as alterações mais recentes em seu espaço de trabalho local (git merge).

EXEMPLO: git pull <repositório-remoto>

!!Essa operação pode causar conflitos que você precisará resolver manualmente.!!


9. Git revert
-> Às vezes, precisamos desfazer as alterações que fizemos. Existem várias maneiras de se desfazer as alterações em nosso espaço de trabalho local
ou remotamente (dependendo do que você necessita), mas devemos usar esses comandos com cuidado para evitar exclusões indesejadas.

Uma maneira segura de desfazer nossos commits é usando git revert. Para ver nosso histórico de commits, primeiro,
precisamos usar: git log --oneline

Em seguida, precisamos apenas especificar o código hash ao lado do commit que desejamos desfazer:

git revert <Código da hash>


10. Git merge
-> Quando você concluir o desenvolvimento em sua branch e quando tudo funcionar bem, a etapa final é fazer o merge (mesclar ou unir, em português)
da branch com a branch pai (dev ou master/main, em geral). Isso é feito com o comando git merge.

Por exemplo, ao querer fazer o merge de sua branch do recurso na branch dev:

Primeiro, troque para a branch dev:

git checkout dev

Antes do merge, atualize sua branch dev local:

git fetch

Por fim, faça o merge da sua branch do recurso em dev:

git merge <nome-da-branch-com-o-recurso>












